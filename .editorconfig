# Most of the rules were taken from here https://github.com/dotnet/runtime/blob/main/.editorconfig
# editorconfig.org

# top-most EditorConfig file
root = true

# Default settings:
# A newline ending every file
# Use 4 spaces as indentation
[*]
insert_final_newline = true
indent_style = space
indent_size = 4
trim_trailing_whitespace = true



# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/csharp-formatting-options
# C# files
[*.cs]
# New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
csharp_indent_switch_labels = true
csharp_indent_labels = one_less_than_current

# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,file,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,required,volatile,async:suggestion

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0003-ide0009
dotnet_style_qualification_for_field = false:error
dotnet_style_qualification_for_property = false:error
dotnet_style_qualification_for_method = false:error
dotnet_style_qualification_for_event = false:error

# Types: use keywords instead of BCL types, and permit var only when the type is clear
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0007-ide0008
csharp_style_var_for_built_in_types = false:error
csharp_style_var_when_type_is_apparent = false:error
csharp_style_var_elsewhere = false:error
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0049
dotnet_style_predefined_type_for_locals_parameters_members = true:error
dotnet_style_predefined_type_for_member_access = true:error

# Constants are UPPERCASE
dotnet_naming_rule.constants_should_be_upper_case.severity = error
dotnet_naming_rule.constants_should_be_upper_case.symbols = constants
dotnet_naming_rule.constants_should_be_upper_case.style = constant_style
dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.required_modifiers = const
dotnet_naming_style.constant_style.capitalization = all_upper

# static fields should have s_ prefix
dotnet_naming_rule.static_fields_should_have_prefix.severity = suggestion
dotnet_naming_rule.static_fields_should_have_prefix.symbols  = static_fields
dotnet_naming_rule.static_fields_should_have_prefix.style    = static_prefix_style
dotnet_naming_symbols.static_fields.applicable_kinds   = field
dotnet_naming_symbols.static_fields.required_modifiers = static
dotnet_naming_symbols.static_fields.applicable_accessibilities = private, internal, private_protected
dotnet_naming_style.static_prefix_style.required_prefix = s_
dotnet_naming_style.static_prefix_style.capitalization = camel_case

# internal and private fields should be _camelCase
dotnet_naming_rule.camel_case_for_private_internal_fields.severity = error
dotnet_naming_rule.camel_case_for_private_internal_fields.symbols  = private_internal_fields
dotnet_naming_rule.camel_case_for_private_internal_fields.style    = camel_case_underscore_style
dotnet_naming_symbols.private_internal_fields.applicable_kinds = field
dotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal
dotnet_naming_style.camel_case_underscore_style.required_prefix = _
dotnet_naming_style.camel_case_underscore_style.capitalization = camel_case

# Code style defaults
csharp_using_directive_placement = outside_namespace:error
dotnet_sort_system_directives_first = true
csharp_prefer_braces = true:error
csharp_preserve_single_line_blocks = true:none
csharp_preserve_single_line_statements = false
csharp_prefer_static_local_function = true:error
csharp_prefer_simple_using_statement = false:none
csharp_style_prefer_switch_expression = true:error
dotnet_style_readonly_field = true:error

# Expression-level preferences
dotnet_style_object_initializer = true:error
dotnet_style_collection_initializer = true:suggestion
dotnet_style_prefer_collection_expression = when_types_exactly_match
dotnet_style_explicit_tuple_names = true:error
dotnet_style_coalesce_expression = true:error
dotnet_style_null_propagation = true:error
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:error
dotnet_style_prefer_inferred_tuple_names = true:error
dotnet_style_prefer_inferred_anonymous_type_member_names = true:error
dotnet_style_prefer_auto_properties = true:error
dotnet_style_prefer_conditional_expression_over_assignment = true:error
dotnet_style_prefer_conditional_expression_over_return = true:error
csharp_prefer_simple_default_expression = false:error

# Expression-bodied members
csharp_style_expression_bodied_methods = false:error
csharp_style_expression_bodied_constructors = false:error
csharp_style_expression_bodied_operators = true:silent
csharp_style_expression_bodied_properties = true:silent
csharp_style_expression_bodied_indexers = true:silent
csharp_style_expression_bodied_accessors = false:error
csharp_style_expression_bodied_lambdas = when_one_single_line:error
csharp_style_expression_bodied_local_functions = false:error

# Pattern matching
csharp_style_pattern_matching_over_is_with_cast_check = true:error
csharp_style_pattern_matching_over_as_with_null_check = true:error
csharp_style_inlined_variable_declaration = true:error

# Null checking preferences
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Other features
csharp_style_prefer_index_operator = false:none
csharp_style_prefer_range_operator = false:none
csharp_style_pattern_local_over_anonymous_function = true:none
dotnet_diagnostic.IDE0005.severity = error
csharp_style_namespace_declarations = file_scoped:error
csharp_style_prefer_primary_constructors = false
dotnet_diagnostic.IDE0290.severity = none
dotnet_diagnostic.IDE0060.severity = error # Remove unused parameter https://learn.microsoft.com/en-gb/dotnet/fundamentals/code-analysis/style-rules/ide0060
dotnet_diagnostic.IDE0052.severity = error # Remove unread private member https://learn.microsoft.com/en-gb/dotnet/fundamentals/code-analysis/style-rules/ide0052

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false



# https://gist.github.com/kurnakovv/70a5d76dc5f3eb9ef114b182283cb407
##
## StyleCop.Analyzers
##
# All rules here https://github.com/DotNetAnalyzers/StyleCopAnalyzers/tree/master/documentation

# A violation of this rule occurs when a compilation (project) contains one or more files which are parsed with the DocumentationMode set to None. This most frequently occurs when the project is configured to not produce an XML documentation file during the build.
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA0001.md
dotnet_diagnostic.SA0001.severity = none

# This rule reports cases where the StyleCop Analyzers settings file could not be loaded. When this occurs, the various analyzers automatically fall back to using the default settings, which may not match the user's expectations.
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA0002.md
dotnet_diagnostic.SA0002.severity = none


# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1000.md
dotnet_diagnostic.SA1000.severity = none

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1001.md
dotnet_diagnostic.SA1001.severity = error

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1002.md
dotnet_diagnostic.SA1002.severity = error

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1003.md
dotnet_diagnostic.SA1003.severity = error

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1004.md
dotnet_diagnostic.SA1004.severity = error

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1005.md
dotnet_diagnostic.SA1005.severity = error

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1006.md
dotnet_diagnostic.SA1006.severity = none

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1007.md
dotnet_diagnostic.SA1007.severity = error

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1008.md
dotnet_diagnostic.SA1008.severity = none

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1009.md
dotnet_diagnostic.SA1009.severity = none

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1010.md
dotnet_diagnostic.SA1010.severity = none

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1011.md
dotnet_diagnostic.SA1011.severity = none

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1012.md
dotnet_diagnostic.SA1012.severity = error

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1013.md
dotnet_diagnostic.SA1013.severity = error

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1014.md
dotnet_diagnostic.SA1014.severity = error

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1015.md
dotnet_diagnostic.SA1015.severity = error

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1016.md
dotnet_diagnostic.SA1016.severity = error

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1017.md
dotnet_diagnostic.SA1017.severity = error

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1018.md
dotnet_diagnostic.SA1018.severity = error

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1019.md
dotnet_diagnostic.SA1019.severity = error

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1020.md
dotnet_diagnostic.SA1020.severity = error

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1021.md
dotnet_diagnostic.SA1021.severity = error

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1022.md
dotnet_diagnostic.SA1022.severity = error

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1023.md
dotnet_diagnostic.SA1023.severity = error

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1024.md
dotnet_diagnostic.SA1024.severity = error

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1025.md
dotnet_diagnostic.SA1025.severity = error

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1026.md
dotnet_diagnostic.SA1026.severity = error

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1027.md
dotnet_diagnostic.SA1027.severity = none

# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1028.md
dotnet_diagnostic.SA1028.severity = error


### Readability Rules (SA1100-)
# Rules which ensure that the code is well-formatted and readable.
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/ReadabilityRules.md

# A call to a member from an inherited class begins with `base.`, and the local class does not contain an override or implementation of the member.
dotnet_diagnostic.SA1100.severity = none

# A call to an instance member of the local class or a base class is not prefixed with 'this.', within a C# code file.
dotnet_diagnostic.SA1101.severity = none

# A C# query clause does not begin on the same line as the previous clause, or on the next line.
dotnet_diagnostic.SA1102.severity = error

# The clauses within a C# query expression are not all placed on the same line, and each clause is not placed on its own line.
dotnet_diagnostic.SA1103.severity = error

# A clause within a C# query expression begins on the same line as the previous clause, when the previous clause spans across multiple lines.
dotnet_diagnostic.SA1104.severity = error

# A clause within a C# query expression spans across multiple lines, and does not begin on its own line.
dotnet_diagnostic.SA1105.severity = error

# The C# code contains an extra semicolon.
dotnet_diagnostic.SA1106.severity = error

# The C# code contains more than one statement on a single line.
dotnet_diagnostic.SA1107.severity = error

# A C# statement contains a comment between the declaration of the statement and the opening brace of the statement.
dotnet_diagnostic.SA1108.severity = error

# A C# statement contains a region tag between the declaration of the statement and the opening brace of the statement.
dotnet_diagnostic.SA1109.severity = error

# The opening parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is not placed on the same line as the method or indexer name.
dotnet_diagnostic.SA1110.severity = none

# The closing parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is not placed on the same line as the last parameter.
dotnet_diagnostic.SA1111.severity = none

# The closing parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is not placed on the same line as the opening bracket when the element does not take any parameters.
dotnet_diagnostic.SA1112.severity = error

# A comma between two parameters in a call to a C# method or indexer, or in the declaration of a method or indexer, is not placed on the same line as the previous parameter.
dotnet_diagnostic.SA1113.severity = error

# The start of the parameter list for a method or indexer call or declaration does not begin on the same line as the opening bracket, or on the line after the opening bracket.
dotnet_diagnostic.SA1114.severity = none

# A parameter within a C# method or indexer call or declaration does not begin on the same line as the previous parameter, or on the next line.
dotnet_diagnostic.SA1115.severity = none

# The parameters to a C# method or indexer call or declaration span across multiple lines, but the first parameter does not start on the line after the opening bracket.
dotnet_diagnostic.SA1116.severity = none

# The parameters to a C# method or indexer call or declaration are not all on the same line or each on a separate line.
dotnet_diagnostic.SA1117.severity = error

# A parameter to a C# method or indexer, other than the first parameter, spans across multiple lines.
dotnet_diagnostic.SA1118.severity = error

# A C# statement contains parenthesis which are unnecessary and should be removed.
dotnet_diagnostic.SA1119.severity = error

# The C# comment does not contain any comment text.
dotnet_diagnostic.SA1120.severity = error

# The code uses one of the basic C# types, but does not use the built-in alias for the type.
dotnet_diagnostic.SA1121.severity = error

# The C# code includes an empty string, written as `"`.
dotnet_diagnostic.SA1122.severity = error

# The C# code contains a region within the body of a code element.
dotnet_diagnostic.SA1123.severity = none

# The C# code contains a region.
dotnet_diagnostic.SA1124.severity = none

# The Nullable type has been defined not using the C# shorthand.
dotnet_diagnostic.SA1125.severity = error

# A call to a member is not prefixed with the 'this.', 'base.', 'object.' or 'typename.' prefix to indicate the intended method call, within a C# code file.
dotnet_diagnostic.SA1126.severity = error

# A generic constraint on a type or method declaration is on the same line as the declaration, within a C# code file.
dotnet_diagnostic.SA1127.severity = error

# A constructor initializer is on the same line as the constructor declaration, within a C# code file.
dotnet_diagnostic.SA1128.severity = none

# A value type was constructed using the syntax `new T()`.
dotnet_diagnostic.SA1129.severity = error

# An anonymous method was declared using the form `delegate (parameters) { }`, when a lambda expression would provide equivalent behavior with the syntax `(parameters) => { }`.
dotnet_diagnostic.SA1130.severity = error

# A comparison was made between a variable and a literal or constant value, and the variable appeared on the right-hand side of the expression.
dotnet_diagnostic.SA1131.severity = error

# Two or more fields were declared in the same field declaration syntax.
dotnet_diagnostic.SA1132.severity = error

# Two or more attributes appeared within the same set of square brackets.
dotnet_diagnostic.SA1133.severity = error

# An attribute is placed on the same line of code as another attribute or element.
dotnet_diagnostic.SA1134.severity = error

# A using directive is not qualified.
dotnet_diagnostic.SA1135.severity = error

# Multiple enum values are placed on the same line of code.
dotnet_diagnostic.SA1136.severity = error

# Two sibling elements which each start on their own line have different levels of indentation.
dotnet_diagnostic.SA1137.severity = error

# Use literal suffix notation instead of casting.
dotnet_diagnostic.SA1139.severity = error

# Use tuple syntax instead of the underlying ValueTuple implementation type.
dotnet_diagnostic.SA1141.severity = error


### Ordering Rules (SA1200-)
# Rules which enforce a standard ordering scheme for code contents.
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/OrderingRules.md

# A C# using directive is placed outside of a namespace element.
dotnet_diagnostic.SA1200.severity = none

# An element within a C# code file is out of order in relation to the other elements in the code.
dotnet_diagnostic.SA1201.severity = error

# An element within a C# code file is out of order within regard to access level, in relation to other elements in the code.
dotnet_diagnostic.SA1202.severity = error

# A constant field is placed beneath a non-constant field.
dotnet_diagnostic.SA1203.severity = error

# A static element is positioned beneath an instance element of the same type.
dotnet_diagnostic.SA1204.severity = none

# The partial element does not have an access modifier defined.
dotnet_diagnostic.SA1205.severity = error

# The keywords within the declaration of an element do not follow a standard ordering scheme.
dotnet_diagnostic.SA1206.severity = none

# The keyword *protected* is positioned after the keyword *internal* within the declaration of a protected internal C# element.
dotnet_diagnostic.SA1207.severity = error

# A using directive which declares a member of the *System* namespace appears after a using directive which declares a member of a different namespace, within a C# code file.
dotnet_diagnostic.SA1208.severity = none

# A using-alias directive is positioned before a regular using directive.
dotnet_diagnostic.SA1209.severity = error

# The using directives within a C# code file are not sorted alphabetically by namespace.
dotnet_diagnostic.SA1210.severity = none

# The using-alias directives within a C# code file are not sorted alphabetically by alias name.
dotnet_diagnostic.SA1211.severity = none

# A get accessor appears after a set accessor within a property or indexer.
dotnet_diagnostic.SA1212.severity = error

# An add accessor appears after a remove accessor within an event.
dotnet_diagnostic.SA1213.severity = error

# A readonly field is positioned beneath a non-readonly field.
dotnet_diagnostic.SA1214.severity = error

# An instance readonly element is positioned beneath an instance non-readonly element of the same type.
dotnet_diagnostic.SA1215.severity = error

# A `using static` directive is positioned at the wrong location (before a regular using directive or after an alias using directive).
dotnet_diagnostic.SA1216.severity = error

# The `using static` directives within a C# code file are not sorted alphabetically by full type name.
dotnet_diagnostic.SA1217.severity = error


### Naming Rules (SA1300-)
# Rules which enforce naming requirements for members, types, and variables.
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/NamingRules.md

# The name of a C# element does not begin with an upper-case letter.
dotnet_diagnostic.SA1300.severity = error

# There are currently no situations in which this rule will fire.
dotnet_diagnostic.SA1301.severity = none

# The name of a C# interface does not begin with the capital letter I.
dotnet_diagnostic.SA1302.severity = error

# The name of a constant C# field should begin with an upper-case letter.
dotnet_diagnostic.SA1303.severity = none

# The name of a non-private readonly C# field should being with an upper-case letter.
dotnet_diagnostic.SA1304.severity = error

# The name of a field or variable in C# uses Hungarian notation.
dotnet_diagnostic.SA1305.severity = none

# The name of a field in C# does not begin with a lower-case letter.
dotnet_diagnostic.SA1306.severity = error

# The name of a public or internal field in C# does not begin with an upper-case letter.
dotnet_diagnostic.SA1307.severity = error

# A field name in C# is prefixed with *m_* or *s_*.
dotnet_diagnostic.SA1308.severity = none

# A field name in C# begins with an underscore.
dotnet_diagnostic.SA1309.severity = none

# A field name in C# contains an underscore.
dotnet_diagnostic.SA1310.severity = none

# The name of a static readonly field does not begin with an upper-case letter.
dotnet_diagnostic.SA1311.severity = none

# The name of a variable in C# does not begin with a lower-case letter.
dotnet_diagnostic.SA1312.severity = error

# The name of a parameter in C# does not begin with a lower-case letter.
dotnet_diagnostic.SA1313.severity = error

# The name of a C# type parameter does not begin with the capital letter T.
dotnet_diagnostic.SA1314.severity = error

# Element names within a tuple type should have the correct casing.
dotnet_diagnostic.SA1316.severity = error


### Maintainability Rules (SA1400-)
# Rules which improve code maintainability.
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/MaintainabilityRules.md

# The access modifier for a C# element has not been explicitly defined.
dotnet_diagnostic.SA1400.severity = error

# A field within a C# class has an access modifier other than private.
dotnet_diagnostic.SA1401.severity = error

# A C# code file contains more than one unique type.
dotnet_diagnostic.SA1402.severity = none

# A C# code file contains more than one namespace.
dotnet_diagnostic.SA1403.severity = error

# A Code Analysis SuppressMessage attribute does not include a justification.
dotnet_diagnostic.SA1404.severity = error

# A call to Debug.Assert in C# code does not include a descriptive message.
dotnet_diagnostic.SA1405.severity = error

# A call to Debug.Fail in C# code does not include a descriptive message.
dotnet_diagnostic.SA1406.severity = error

# A C# statement contains a complex arithmetic expression which omits parenthesis around operators.
dotnet_diagnostic.SA1407.severity = error

# A C# statement contains a complex conditional expression which omits parenthesis around operators.
dotnet_diagnostic.SA1408.severity = error

# A C# file contains code which is unnecessary and can be removed without changing the overall logic of the code.
dotnet_diagnostic.SA1409.severity = error

# A call to a C# anonymous method does not contain any method parameters, yet the statement still includes parenthesis.
dotnet_diagnostic.SA1410.severity = error

# An attribute declaration does not contain any parameters, yet it still includes parenthesis.
dotnet_diagnostic.SA1411.severity = error

# The encoding of the file is not UTF-8 with byte order mark.
dotnet_diagnostic.SA1412.severity = none

# A multi-line initializer should use a comma on the last item.
dotnet_diagnostic.SA1413.severity = error

# Tuple types appearing in member declarations should have explicitly named tuple elements.
dotnet_diagnostic.SA1414.severity = error


### Layout Rules (SA1500-)
# Rules which enforce code layout and line spacing.
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/LayoutRules.md

# The opening or closing brace within a C# statement, element, or expression is not placed on its own line.
dotnet_diagnostic.SA1500.severity = error

# A C# statement containing opening and closing braces is written completely on a single line.
dotnet_diagnostic.SA1501.severity = error

# A C# element containing opening and closing braces is written completely on a single line.
dotnet_diagnostic.SA1502.severity = error

# The opening and closing braces for a C# statement have been omitted.
dotnet_diagnostic.SA1503.severity = error

# Within a C# property, indexer or event, at least one of the child accessors is written on a single line, and at least one of the child accessors is written across multiple lines.
dotnet_diagnostic.SA1504.severity = none

# An opening brace within a C# element, statement, or expression is followed by a blank line.
dotnet_diagnostic.SA1505.severity = error

# An element documentation header above a C# element is followed by a blank line.
dotnet_diagnostic.SA1506.severity = error

# The C# code contains multiple blank lines in a row.
dotnet_diagnostic.SA1507.severity = error

# A closing brace within a C# element, statement, or expression is preceded by a blank line.
dotnet_diagnostic.SA1508.severity = error

# An opening brace within a C# element, statement, or expression is preceded by a blank line.
dotnet_diagnostic.SA1509.severity = error

# Chained C# statements are separated by a blank line.
dotnet_diagnostic.SA1510.severity = error

# The while footer at the bottom of a do-while statement is separated from the statement by a blank line.
dotnet_diagnostic.SA1511.severity = error

# A single-line comment within C# code is followed by a blank line.
dotnet_diagnostic.SA1512.severity = error

# A closing brace within a C# element, statement, or expression is not followed by a blank line.
dotnet_diagnostic.SA1513.severity = none

# An element documentation header above a C# element is not preceded by a blank line.
dotnet_diagnostic.SA1514.severity = error

# A single-line comment within C# code is not preceded by a blank line.
dotnet_diagnostic.SA1515.severity = error

# Adjacent C# elements are not separated by a blank line.
dotnet_diagnostic.SA1516.severity = none

# The code file has blank lines at the start.
dotnet_diagnostic.SA1517.severity = error

# The line endings at the end of a file do not match the settings for the project.
dotnet_diagnostic.SA1518.severity = error

# The opening and closing braces for a multi-line C# statement have been omitted.
dotnet_diagnostic.SA1519.severity = error

# The opening and closing braces of a chained `if`/`else if`/`else` construct were included for some clauses, but omitted for others.
dotnet_diagnostic.SA1520.severity = error


### Documentation Rules (SA1600-)
# Rules which verify the content and formatting of code documentation.
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/DocumentationRules.md

# A C# code element is missing a documentation header.
dotnet_diagnostic.SA1600.severity = none

# A C# partial element is missing a documentation header.
dotnet_diagnostic.SA1601.severity = none

# An item within a C# enumeration is missing an Xml documentation header.
dotnet_diagnostic.SA1602.severity = none

# The Xml within a C# element's document header is badly formed.
dotnet_diagnostic.SA1603.severity = error

# The Xml header documentation for a C# element is missing a `<summary>` tag.
dotnet_diagnostic.SA1604.severity = error

# The `<summary>` or `<content>` tag within the documentation header for a C# code element is missing or empty.
dotnet_diagnostic.SA1605.severity = none

# The `<summary>` tag within the documentation header for a C# code element is empty.
dotnet_diagnostic.SA1606.severity = error

# The `<summary>` or `<content>` tag within the documentation header for a C# code element is empty.
dotnet_diagnostic.SA1607.severity = error

# The `<summary>` tag within an element's Xml header documentation contains the default text generated by Visual Studio during the creation of the element.
dotnet_diagnostic.SA1608.severity = error

# The Xml header documentation for a C# property does not contain a `<value>` tag.
dotnet_diagnostic.SA1609.severity = none

# The Xml header documentation for a C# property contains an empty `<value>` tag.
dotnet_diagnostic.SA1610.severity = error

# A C# method, constructor, delegate or indexer element is missing documentation for one or more of its parameters.
dotnet_diagnostic.SA1611.severity = error

# The documentation describing the parameters to a C# method, constructor, delegate or indexer element does not match the actual parameters on the element.
dotnet_diagnostic.SA1612.severity = error

# A `<param>` tag within a C# element's documentation header is missing a name attribute containing the name of the parameter.
dotnet_diagnostic.SA1613.severity = error

# A `<param>` tag within a C# element's documentation header is empty.
dotnet_diagnostic.SA1614.severity = error

# A C# element is missing documentation for its return value.
dotnet_diagnostic.SA1615.severity = error

# The `<returns>` tag within a C# element's documentation header is empty.
dotnet_diagnostic.SA1616.severity = error

# A C# code element does not contain a return value, or returns void, but the documentation header for the element contains a `<returns>` tag.
dotnet_diagnostic.SA1617.severity = none

# A generic C# element is missing documentation for one or more of its generic type parameters.
dotnet_diagnostic.SA1618.severity = error

# A generic, partial C# element is missing documentation for one or more of its generic type parameters, and the documentation for the element contains a `<summary>` tag.
dotnet_diagnostic.SA1619.severity = error

# The `<typeparam>` tags within the Xml header documentation for a generic C# element do not match the generic type parameters on the element.
dotnet_diagnostic.SA1620.severity = error

# A `<typeparam>` tag within the Xml header documentation for a generic C# element is missing a name attribute, or contains an empty name attribute.
dotnet_diagnostic.SA1621.severity = error

# A `<typeparam>` tag within the Xml header documentation for a generic C# element is empty.
dotnet_diagnostic.SA1622.severity = error

# The documentation text within a C# property's `<summary>` tag does not match the accessors within the property.
dotnet_diagnostic.SA1623.severity = none

# The documentation text within a C# property's `<summary>` tag takes into account all of the accessors within the property, but one of the accessors has limited access.
dotnet_diagnostic.SA1624.severity = none

# The Xml documentation for a C# element contains two or more identical entries, indicating that the documentation has been copied and pasted.
dotnet_diagnostic.SA1625.severity = error

# The C# code contains a single-line comment which begins with three forward slashes in a row.
dotnet_diagnostic.SA1626.severity = error

# The Xml header documentation for a C# code element contains an empty tag.
dotnet_diagnostic.SA1627.severity = error

# A section of the Xml header documentation for a C# element does not begin with a capital letter.
dotnet_diagnostic.SA1628.severity = error

# A section of the Xml header documentation for a C# element does not end with a period (also known as a full stop).
dotnet_diagnostic.SA1629.severity = error

# A section of the Xml header documentation for a C# element does not contain any whitespace between words.
dotnet_diagnostic.SA1630.severity = none

# A section of the Xml header documentation for a C# element does not contain enough alphabetic characters.
dotnet_diagnostic.SA1631.severity = none

# A violation of this rule occurs when part of the documentation is too short. This can often indicate that the documentation is not descriptive.
dotnet_diagnostic.SA1632.severity = none

# A C# code file is missing a standard file header.
dotnet_diagnostic.SA1633.severity = warning

# The file header at the top of a C# code file is missing a copyright tag.
dotnet_diagnostic.SA1634.severity = warning

# The file header at the top of a C# code file is missing copyright text.
dotnet_diagnostic.SA1635.severity = warning

# The file header at the top of a C# code file does not contain the appropriate copyright text.
dotnet_diagnostic.SA1636.severity = warning

# The file header at the top of a C# code file is missing the file name.
dotnet_diagnostic.SA1637.severity = none

# The file tag within the file header at the top of a C# code file does not contain the name of the file.
dotnet_diagnostic.SA1638.severity = none

# The file header at the top of a C# code file does not contain a filled-in summary tag.
dotnet_diagnostic.SA1639.severity = warning

# The file header at the top of a C# code file does not contain company name text.
dotnet_diagnostic.SA1640.severity = warning

# The file header at the top of a C# code file does not contain the appropriate company name text.
dotnet_diagnostic.SA1641.severity = warning

# The XML documentation header for a C# constructor does not contain the appropriate summary text.
dotnet_diagnostic.SA1642.severity = none

# The Xml documentation header for a C# finalizer does not contain the appropriate summary text.
dotnet_diagnostic.SA1643.severity = error

# A section within the Xml documentation header for a C# element contains blank lines.
dotnet_diagnostic.SA1644.severity = error

# An included Xml documentation file does not exist.
dotnet_diagnostic.SA1645.severity = error

# An included Xml documentation link contains an invalid path.
dotnet_diagnostic.SA1646.severity = error

# An include tag within an Xml documentation header does not contain valid file and path attribute.
dotnet_diagnostic.SA1647.severity = error

# `<inheritdoc>` has been used on an element that doesn't inherit from a base class or implement an interface.
dotnet_diagnostic.SA1648.severity = error

# The file name of a C# code file does not match the first type declared in the file.
dotnet_diagnostic.SA1649.severity = none

# The element documentation for the element contains one or more spelling mistakes or unrecognized words.
dotnet_diagnostic.SA1650.severity = none

# The documentation for the element contains one or more `<placeholder>` elements.
dotnet_diagnostic.SA1651.severity = none

# This rule was moved to [SA0001](SA0001.md)
dotnet_diagnostic.SA1652.severity = none


### Alternative Rules (SX0000-)
# Rules which are non-standard extensions to the default StyleCop behavior, and represent an alternative style which is adopted by some projects. Alternative rules are known to directly conflict with standard StyleCop rules.
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/AlternativeRules.md

# A call to an instance member of the local class or a base class is prefixed with 'this.', within a C# code file.
dotnet_diagnostic.SX1101.severity = error

# A field name does not begin with an underscore.
dotnet_diagnostic.SX1309.severity = none

# A static field name does not begin with an underscore.
dotnet_diagnostic.SX1309S.severity = none

## *END* StyleCop.Analyzers



##
## ReSharper Inspect Code https://www.jetbrains.com/help/resharper/Reference__Code_Inspections_CSHARP.html
##

# Code inspection: Inconsistent Naming https://www.jetbrains.com/help/resharper/InconsistentNaming.html
###resharper_inconsistent_naming_highlighting = none

# Method invocation is skipped
resharper_invocation_is_skipped_highlighting = none

# Access to a static member of a type via a derived type
resharper_access_to_static_member_via_derived_type_highlighting = none

# Actual number of bytes read by 'Stream.Read()' is ignored
resharper_stream_read_return_value_ignored_highlighting = none

# Add explicit 'return' or 'continue' before local functions
resharper_separate_local_functions_with_jump_statement_highlighting = none

# Auto-property can be made get-only (non-private accessibility)
resharper_auto_property_can_be_made_get_only_global_highlighting = none

# Auto-property can be made get-only (private accessibility)
resharper_auto_property_can_be_made_get_only_local_highlighting = none

# Can simplify 'Contains' before 'Add'
resharper_can_simplify_set_adding_with_single_call_highlighting = none

# Cast expression can be replaced with explicit type arguments
resharper_can_replace_cast_with_type_argument_highlighting = none

# Cast expression can be replaced with explicit variable type
resharper_can_replace_cast_with_variable_type_highlighting = none

# Cast expression can be replaced with lambda return type
resharper_can_replace_cast_with_lambda_return_type_highlighting = none

# Cast expression can be replaced with simplified type arguments
resharper_can_replace_cast_with_shorter_type_argument_highlighting = none

# Change lock field type to 'System.Threading.Lock'
resharper_change_field_type_to_system_threading_lock_highlighting = none

# Confusing body-like statement
resharper_misleading_body_like_statement_highlighting = none

# Convert 'if' into '||'
resharper_convert_if_to_or_expression_highlighting = none

# Dictionary item removal can be simplified with single 'Remove'
resharper_can_simplify_dictionary_removing_with_single_call_highlighting = none

# Dictionary lookup can be simplified with 'GetValueOrDefault'
resharper_can_simplify_dictionary_try_get_value_with_get_value_or_default_highlighting = none

# Dictionary lookup can be simplified with 'TryAdd'
resharper_can_simplify_dictionary_lookup_with_try_add_highlighting = none

# Dictionary lookup can be simplified with 'TryGetValue'
resharper_can_simplify_dictionary_lookup_with_try_get_value_highlighting = none

# Empty statement is redundant
resharper_empty_statement_highlighting = none

# Field can be made readonly (non-private accessibility)
resharper_field_can_be_made_read_only_global_highlighting = none

# Field can be made readonly (private accessibility)
resharper_field_can_be_made_read_only_local_highlighting = none

# Get-only auto-property is never assigned
resharper_unassigned_get_only_auto_property_highlighting = none

# Iteration variable can be declared with a more specific type
resharper_more_specific_foreach_variable_type_available_highlighting = none

# Join local variable declaration and assignment
resharper_join_declaration_and_initializer_highlighting = none

# Local function can be made static
resharper_local_function_can_be_made_static_highlighting = none

# Local variable has too wide declaration scope
resharper_too_wide_local_variable_scope_highlighting = none

# Make constructor in abstract class protected
resharper_public_constructor_in_abstract_class_highlighting = none

# Member can be made private (non-private accessibility)
resharper_member_can_be_private_global_highlighting = none

# Member can be made private (private accessibility)
resharper_member_can_be_private_local_highlighting = none

# Member can be made protected (non-private accessibility)
resharper_member_can_be_protected_global_highlighting = none

# Member can be made protected (private accessibility)
resharper_member_can_be_protected_local_highlighting = none

# Member can be made static (shared) (non-private accessibility)
resharper_member_can_be_made_static_global_highlighting = none

# Member can be made static (shared) (private accessibility)
resharper_member_can_be_made_static_local_highlighting = none

# Multiple nullable attributes usage
resharper_multiple_nullable_attributes_usage_highlighting = none

# Nullability attribute usage with declaration of void or value type
resharper_annotation_redundancy_at_value_type_highlighting = none

# Parameter type can be IEnumerable&lt;T&gt; (non-private accessibility)
resharper_parameter_type_can_be_enumerable_global_highlighting = none

# Parameter type can be IEnumerable&lt;T&gt; (private accessibility)
resharper_parameter_type_can_be_enumerable_local_highlighting = none

# Prefer using concrete value over 'default' or 'new()'
resharper_prefer_concrete_value_over_default_highlighting = none

# Property can be made init-only (non-private accessibility)
resharper_property_can_be_made_init_only_global_highlighting = none

# Property can be made init-only (private accessibility)
resharper_property_can_be_made_init_only_local_highlighting = none

# Replace with single assignment
resharper_replace_with_single_assignment_false_highlighting = none

# Replace with single assignment
resharper_replace_with_single_assignment_true_highlighting = none

# Return type can be IEnumerable&lt;T&gt; (non-private accessibility)
resharper_return_type_can_be_enumerable_global_highlighting = none

# Return type can be IEnumerable&lt;T&gt; (private accessibility)
resharper_return_type_can_be_enumerable_local_highlighting = none

# Simplify conditional ternary expression
resharper_simplify_conditional_ternary_expression_highlighting = none

# Simplify 'IsInstanceOfType()' invocation
resharper_can_simplify_is_assignable_from_highlighting = none

# Simplify negative equality expression
resharper_negative_equality_expression_highlighting = none

# Specify string comparison explicitly
resharper_specify_string_comparison_highlighting = none

# Specify string culture explicitly
resharper_specify_a_culture_in_string_conversion_explicitly_highlighting = none

# String.Compare is culture-specific (string.Compare(string, int, string, int) is culture-specific)
resharper_string_compare_is_culture_specific_4_highlighting = none

# String.Compare is culture-specific (string.Compare(string, int, string, int, bool) is culture-specific)
resharper_string_compare_is_culture_specific_5_highlighting = none

# String.Compare is culture-specific (string.Compare(string, int, string, int, bool) is culture-specific)
resharper_string_compare_is_culture_specific_6_highlighting = none

# String.Compare is culture-specific (string.Compare(string, string) is culture-specific)
resharper_string_compare_is_culture_specific_1_highlighting = none

# String.Compare is culture-specific (string.Compare(string, string, bool) is culture-specific)
resharper_string_compare_is_culture_specific_2_highlighting = none

# String.Compare is culture-specific (string.Compare(string, string, bool) is culture-specific)
resharper_string_compare_is_culture_specific_3_highlighting = none

# String.CompareTo is culture-specific
resharper_string_compare_to_is_culture_specific_highlighting = none

# String.EndsWith is culture-specific (string.EndsWith(string) is culture-specific)
resharper_string_ends_with_is_culture_specific_highlighting = none

# String.IndexOf is culture-specific (string.IndexOf(string) is culture-specific)
resharper_string_index_of_is_culture_specific_1_highlighting = none

# String.IndexOf is culture-specific (string.IndexOf(string, int) is culture-specific)
resharper_string_index_of_is_culture_specific_2_highlighting = none

# String.IndexOf is culture-specific (string.IndexOf(string, int) is culture-specific)
resharper_string_index_of_is_culture_specific_3_highlighting = none

# String.LastIndexOf is culture-specific (string.LastIndexOf(string) is culture-specific)
resharper_string_last_index_of_is_culture_specific_1_highlighting = none

# String.LastIndexOf is culture-specific (string.LastIndexOf(string, int) is culture-specific)
resharper_string_last_index_of_is_culture_specific_2_highlighting = none

# String.LastIndexOf is culture-specific (string.LastIndexOf(string, int) is culture-specific)
resharper_string_last_index_of_is_culture_specific_3_highlighting = none

# String.StartsWith is culture-specific (string.StartsWith(string) is culture-specific)
resharper_string_starts_with_is_culture_specific_highlighting = none

# Struct lacks 'IEquatable' implementation (non-private accessibility)
resharper_struct_lacks_i_equatable_global_highlighting = none

# Struct lacks 'IEquatable' implementation (private accessibility)
resharper_struct_lacks_i_equatable_local_highlighting = none

# Struct with default equality members is used for comparison (non-private accessibility)
resharper_default_struct_equality_is_used_global_highlighting = none

# Struct with default equality members is used for comparison (private accessibility)
resharper_default_struct_equality_is_used_local_highlighting = none

# Type with suspicious equality is used in a record (non-private accessibility)
resharper_type_with_suspicious_equality_is_used_in_record_global_highlighting = none

# Type with suspicious equality is used in a record (private accessibility)
resharper_type_with_suspicious_equality_is_used_in_record_local_highlighting = none

# Usage of default struct equality
resharper_usage_of_default_struct_equality_highlighting = none

# Use 'is' operator
resharper_can_simplify_is_instance_of_type_highlighting = none

# Use method Any()
resharper_use_method_any_0_highlighting = none

# Use 'String.IsNullOrEmpty'
resharper_replace_with_string_is_null_or_empty_highlighting = none

# '#warning' directive
resharper_c_sharp_warnings_cs1030_highlighting = none

# [InterpolatedStringHandlerArgument] has no effect when applied to lambda parameters and will be ignored at the call site.
resharper_c_sharp_warnings_cs8971_highlighting = none

# A default value is specified for 'ref readonly' parameter, but 'ref readonly' should be used only for references. Consider declaring the parameter as 'in'.
resharper_c_sharp_warnings_cs9200_highlighting = none

# A method marked [DoesNotReturn] should not return.
resharper_c_sharp_warnings_cs8763_highlighting = none

# A possible null value may not be used for a type marked with [NotNull] or [DisallowNull].
resharper_c_sharp_warnings_cs8607_highlighting = none

# A previous catch clause already catches all exceptions
resharper_c_sharp_warnings_cs1058_highlighting = none

# A value of type 'System.Threading.Lock' converted to a different type will use likely unintended monitor-based locking in 'lock' statement
resharper_c_sharp_warnings_cs9216_highlighting = none

# Access to a member through 'base' keyword from anonymous method, lambda expression, query expression or iterator results in unverifiable code
resharper_c_sharp_warnings_cs1911_highlighting = none

# Ambiguous reference in XML comment
resharper_c_sharp_warnings_cs1574_highlighting = none

# Argument cannot be used as an output for parameter due to differences in the nullability of reference types.
resharper_c_sharp_warnings_cs8624_highlighting = none

# Argument cannot be used for corresponding parameter due to differences in the nullability of reference types.
resharper_c_sharp_warnings_cs8620_highlighting = none

# Argument should be a variable because it is passed to a 'ref readonly' parameter.
resharper_c_sharp_warnings_cs9193_highlighting = none

# Argument should be passed with the 'in' keyword.
resharper_c_sharp_warnings_cs9195_highlighting = none

# Assignment in conditional expression
resharper_c_sharp_warnings_cs0665_highlighting = none

# Assignment made to same variable
resharper_c_sharp_warnings_cs1717_highlighting = none

# Async method invocation without await expression
resharper_c_sharp_warnings_cs4014_highlighting = none

# Asynchronous 'Main' method will not be used as an entry point because a synchronous entry point was found.
resharper_c_sharp_warnings_cs8892_highlighting = none

# 'attribute modifier' is not a recognized attribute location. All attributes in this block will be ignored
resharper_c_sharp_warnings_cs0658_highlighting = none

# 'attribute modifier' is not a valid attribute location for this declaration. All attributes in this block will be ignored
resharper_c_sharp_warnings_cs0657_highlighting = none

# Badly formed XML in included comments file
resharper_c_sharp_warnings_cs1592_highlighting = none

# Bitwise-or operator used on a sign-extended operand.
resharper_c_sharp_warnings_cs0675_highlighting = none

# Cannot convert null literal to non-nullable reference type.
resharper_c_sharp_warnings_cs8625_highlighting = none

# Cannot resolve reference in XML comment
resharper_c_sharp_warnings_cs1574_cs1584_cs1581_cs1580_highlighting = none

# Class overrides Object.Equals(object o) but not Object.GetHashCode()
resharper_c_sharp_warnings_cs0659_highlighting = none

# Code is unreachable
resharper_c_sharp_warnings_cs0162_highlighting = none

# Comparing with null of nullable value type always produces 'false'
resharper_c_sharp_warnings_cs0464_highlighting = none

# Comparison to integral constant is useless; the constant is outside the range of type 'type'.
resharper_c_sharp_warnings_cs0652_highlighting = none

# Converting null literal or possible null value to non-nullable type.
resharper_c_sharp_warnings_cs8600_highlighting = none

# Declaring new protected member in sealed class is the same as declaring it as private
resharper_c_sharp_warnings_cs0628_highlighting = none

# Dereference of a possibly null reference.
resharper_c_sharp_warnings_cs8602_highlighting = none

# Duplicate param tag in XML comment
resharper_c_sharp_warnings_cs1571_highlighting = none

# Duplicate typeparam tag in XML comment
resharper_c_sharp_warnings_cs1710_highlighting = none

# Empty switch block
resharper_c_sharp_warnings_cs1522_highlighting = none

# Field is never used
resharper_unused_field_compiler_highlighting = none

# Given expression is always of the provided type
resharper_c_sharp_warnings_cs0183_highlighting = none

# Given expression is never of the provided type
resharper_c_sharp_warnings_cs0184_highlighting = none

# 'goto case' value is not implicitly convertible to required type
resharper_c_sharp_warnings_cs0469_highlighting = none

# In language version preview, the 'field' keyword binds to a synthesized backing field for the property
resharper_c_sharp_warnings_cs9258_highlighting = none

# Incorrect signature in XML comment
resharper_c_sharp_warnings_cs1580_highlighting = none

# Inline array conversion operator will not be used for conversion from expression of the declaring type.
resharper_c_sharp_warnings_cs9183_highlighting = none

# Inline array indexer will not be used for element access expression.
resharper_c_sharp_warnings_cs9181_highlighting = none

# Inline array 'Slice' method will not be used for element access expression.
resharper_c_sharp_warnings_cs9182_highlighting = none

# 'Inline arrays' language feature is not supported for inline array types with element field which is either a 'ref' field, or has type that is not valid as a type argument.
resharper_c_sharp_warnings_cs9184_highlighting = none

# Introducing a 'Finalize' method can interfere with destructor invocation
resharper_c_sharp_warnings_cs0465_highlighting = none

# Invalid XML in XML comment
resharper_c_sharp_warnings_cs1570_highlighting = none

# Invalid XML include element
resharper_c_sharp_warnings_cs1590_highlighting = none

# Keyword 'new' is redundant
resharper_c_sharp_warnings_cs0109_highlighting = none

# Keyword 'new' is required
resharper_c_sharp_warnings_cs0108_cs0114_highlighting = none

# Member cannot be used in this attribute.
resharper_c_sharp_warnings_cs8776_highlighting = none

# Member must conditionally have a non-null value when exiting a function.
resharper_c_sharp_warnings_cs8775_highlighting = none

# Member must have a non-null value when exiting.
resharper_c_sharp_warnings_cs8774_highlighting = none

# Member overrides obsolete member
resharper_c_sharp_warnings_cs0672_highlighting = none

# Method lacks '[DoesNotReturn]' annotation in order to match implemented or overridden member.
resharper_c_sharp_warnings_cs8770_highlighting = none

# Missing XML comment for publicly visible type or member
resharper_c_sharp_warnings_cs1591_highlighting = none

# Multiple override candidates at run-time
resharper_c_sharp_warnings_cs1957_highlighting = none

# Non-accessed field
resharper_not_accessed_field_compiler_highlighting = none

# Non-accessed local variable
resharper_not_accessed_variable_compiler_highlighting = none

# Non-nullable backing field is uninitialized.
resharper_c_sharp_warnings_cs9264_highlighting = none

# Non-nullable member is uninitialized.
resharper_c_sharp_warnings_cs8618_highlighting = none

# Nullability mismatch in constraints for type parameter.
resharper_c_sharp_warnings_cs8633_highlighting = none

# Nullability of reference types in explicit interface specifier doesn't match interface implemented by the type.
resharper_c_sharp_warnings_cs8643_highlighting = none

# Nullability of reference types in interface implemented by the base type doesn't match.
resharper_c_sharp_warnings_cs8644_highlighting = none

# Nullability of reference types in return type doesn't match implemented member.
resharper_c_sharp_warnings_cs8616_highlighting = none

# Nullability of reference types in return type doesn't match implicitly implemented member.
resharper_c_sharp_warnings_cs8613_highlighting = none

# Nullability of reference types in return type doesn't match overridden member.
resharper_c_sharp_warnings_cs8609_highlighting = none

# Nullability of reference types in return type doesn't match partial method declaration.
resharper_c_sharp_warnings_cs8819_highlighting = none

# Nullability of reference types in return type doesn't match the target delegate (possibly because of nullability attributes).
resharper_c_sharp_warnings_cs8621_highlighting = none

# Nullability of reference types in return type in interceptor method doesn't match interceptable method'
resharper_c_sharp_warnings_cs9159_highlighting = none

# Nullability of reference types in source type doesn't match target type.
resharper_c_sharp_warnings_cs8619_highlighting = none

# Nullability of reference types in type doesn't match implemented member.
resharper_c_sharp_warnings_cs8615_highlighting = none

# Nullability of reference types in type doesn't match implicitly implemented member.
resharper_c_sharp_warnings_cs8612_highlighting = none

# Nullability of reference types in type doesn't match overridden member.
resharper_c_sharp_warnings_cs8608_highlighting = none

# Nullability of reference types in type of a parameter doesn't match the target delegate (possibly because of nullability attributes).
resharper_c_sharp_warnings_cs8622_highlighting = none

# Nullability of reference types in type of parameter doesn't match implemented member.
resharper_c_sharp_warnings_cs8617_highlighting = none

# Nullability of reference types in type of parameter doesn't match implicitly implemented member.
resharper_c_sharp_warnings_cs8614_highlighting = none

# Nullability of reference types in type of parameter doesn't match interceptable method
resharper_c_sharp_warnings_cs9158_highlighting = none

# Nullability of reference types in type of parameter doesn't match overridden member.
resharper_c_sharp_warnings_cs8610_highlighting = none

# Nullability of reference types in type of parameter doesn't match partial member declaration.
resharper_c_sharp_warnings_cs8611_highlighting = none

# Nullability of return type doesn't match implemented member (possibly because of nullability attributes).
resharper_c_sharp_warnings_cs8768_highlighting = none

# Nullability of return type doesn't match implicitly implemented member (possibly because of nullability attributes).
resharper_c_sharp_warnings_cs8766_highlighting = none

# Nullability of return type doesn't match overridden member (possibly because of nullability attributes).
resharper_c_sharp_warnings_cs8764_highlighting = none

# Nullability of type argument doesn't match 'class' constraint.
resharper_c_sharp_warnings_cs8634_highlighting = none

# Nullability of type argument doesn't match constraint type.
resharper_c_sharp_warnings_cs8631_highlighting = none

# Nullability of type argument doesn't match 'notnull' constraint.
resharper_c_sharp_warnings_cs8714_highlighting = none

# Nullability of type of parameter doesn't match implemented member (possibly because of nullability attributes).
resharper_c_sharp_warnings_cs8769_highlighting = none

# Nullability of type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
resharper_c_sharp_warnings_cs8767_highlighting = none

# Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).
resharper_c_sharp_warnings_cs8765_highlighting = none

# Nullable value type may be null.
resharper_c_sharp_warnings_cs8629_highlighting = none

# Object or collection initializer implicitly dereferences possibly null member.
resharper_c_sharp_warnings_cs8670_highlighting = none

# Operator '==' or operator '!=' with 'Object.Equals(object o)' and 'Object.GetHashCode()' not overridden
resharper_c_sharp_warnings_cs0660_cs0661_highlighting = none

# Opt in to preview features before using them.
resharper_c_sharp_warnings_ca2252_highlighting = none

# Parameter has no matching param tag in the XML comment
resharper_c_sharp_warnings_cs1573_highlighting = none

# Parameter has params modifier in lambda but not in target delegate type.
resharper_c_sharp_warnings_cs9100_highlighting = none

# Parameter is captured into the state of the enclosing type and its value is also passed to the base constructor. The value might be captured by the base class as well.
resharper_c_sharp_warnings_cs9107_highlighting = none

# Parameter is captured into the state of the enclosing type and its value is also used to initialize a field, property, or event.
resharper_c_sharp_warnings_cs9124_highlighting = none

# Parameter must conditionally have a non-null value when exiting a function.
resharper_c_sharp_warnings_cs8762_highlighting = none

# Parameter must have a non-null value when exiting because parameter mentioned in [NotNullIfNotNull] annotation is non-null.
resharper_c_sharp_warnings_cs8824_highlighting = none

# Parameter must have a non-null value when exiting.
resharper_c_sharp_warnings_cs8777_highlighting = none

# Partial method declarations have inconsistent nullability for type parameter.
resharper_c_sharp_warnings_cs8667_highlighting = none

# Partial property declarations have signature differences.
resharper_c_sharp_warnings_cs9256_highlighting = none

# Possible mistaken empty statement
resharper_c_sharp_warnings_cs0642_highlighting = none

# Possible null reference argument for a parameter.
resharper_c_sharp_warnings_cs8604_highlighting = none

# Possible null reference assignment.
resharper_c_sharp_warnings_cs8601_highlighting = none

# Possible null reference return.
resharper_c_sharp_warnings_cs8603_highlighting = none

# Possible unintended reference comparison
resharper_c_sharp_warnings_cs0252_cs0253_highlighting = none

# Possibly incorrect assignment to local which is the argument to a 'using' or 'lock' statement
resharper_c_sharp_warnings_cs0728_highlighting = none

# Primary constructor parameter is shadowed by a member from base type.
resharper_c_sharp_warnings_cs9179_highlighting = none

# Reference kind modifier of parameter doesn't match the corresponding parameter in overridden or implemented member.
resharper_c_sharp_warnings_cs9196_highlighting = none

# Reference to a volatile field will not be treated as volatile
resharper_c_sharp_warnings_cs0420_highlighting = none

# Return value must be non-null because parameter mentioned in [NotNullIfNotNull] annotation is non-null.
resharper_c_sharp_warnings_cs8825_highlighting = none

# Signatures of interceptable and interceptor methods do not match
resharper_c_sharp_warnings_cs9154_highlighting = none

# Source file has exceeded the limit of 16,707,565 lines representable in the PDB; debug information will be incorrect
resharper_c_sharp_warnings_cs1687_highlighting = none

# Static type in 'is' or 'as' operator.
resharper_c_sharp_warnings_cs7023_highlighting = none

# Syntax error in XML comment
resharper_c_sharp_warnings_cs1584_highlighting = none

# Taking address of marshal-by-reference class field
resharper_c_sharp_warnings_cs0197_highlighting = none

# The '&amp;' operator should not be used on parameters or local variables in async methods.
resharper_c_sharp_warnings_cs9123_highlighting = none

# The branches of the ref conditional operator refer to variables with incompatible declaration scopes.
resharper_c_sharp_warnings_cs9086_highlighting = none

# The default parameter value does not match in the target delegate type.
resharper_c_sharp_warnings_cs9099_highlighting = none

# The 'l' suffix is easily confused with the digit '1'
resharper_c_sharp_warnings_cs0078_highlighting = none

# The 'ref' modifier for an argument corresponding to 'in' parameter is equivalent to 'in'. Consider using 'in' instead.
resharper_c_sharp_warnings_cs9191_highlighting = none

# The 'ref' modifier for an argument corresponding to 'in' parameter is equivalent to 'in'. Consider using 'in' instead.
resharper_c_sharp_warnings_cs9192_highlighting = none

# The result of the expression is always 'null' of nullable type
resharper_c_sharp_warnings_cs0458_highlighting = none

# The result of the expression is always 'true' or 'false' since a value of value type is never equal to 'null'
resharper_c_sharp_warnings_cs0472_highlighting = none

# The result of the expression is always 'true' or 'false' since a value of value type is never equal to 'null'
resharper_c_sharp_warnings_cs8073_highlighting = none

# The switch expression does not handle all possible inputs (it is not exhaustive).
resharper_c_sharp_warnings_cs8509_highlighting = none

# The switch expression does not handle some null inputs (it is not exhaustive).
resharper_c_sharp_warnings_cs8655_highlighting = none

# The switch expression does not handle some null inputs (it is not exhaustive). However, a pattern with a 'when' clause might successfully match this value.
resharper_c_sharp_warnings_cs8847_highlighting = none

# The type name only contains lower-cased ASCII characters. Such names may become reserved for the language
resharper_c_sharp_warnings_cs8981_highlighting = none

# There is no defined ordering between fields in multiple declarations of partial struct. To specify an ordering, all instance fields must be in the same declaration.
resharper_c_sharp_warnings_cs0282_highlighting = none

# This ref-assigns a value that can only escape the current method through a return statement.
resharper_c_sharp_warnings_cs9093_highlighting = none

# This ref-assigns a value that has a wider value escape scope than the target allowing assignment through the target of values with narrower escapes scopes.
resharper_c_sharp_warnings_cs9097_highlighting = none

# This ref-assigns an expression to a variable with a narrower escape scope.
resharper_c_sharp_warnings_cs9085_highlighting = none

# This returns a member of local by reference but it is not a ref local.
resharper_c_sharp_warnings_cs9092_highlighting = none

# This returns a parameter by reference but it is not a ref parameter.
resharper_c_sharp_warnings_cs9087_highlighting = none

# This returns a parameter by reference through a ref parameter; but it can only safely be returned in a return statement.
resharper_c_sharp_warnings_cs9094_highlighting = none

# This returns by reference a member of parameter that is not a ref or out parameter.
resharper_c_sharp_warnings_cs9089_highlighting = none

# This returns by reference a member of parameter through a ref parameter; but it can only safely be returned in a return statement.
resharper_c_sharp_warnings_cs9095_highlighting = none

# This returns local by reference but it is not a ref local.
resharper_c_sharp_warnings_cs9091_highlighting = none

# Thrown value may be null.
resharper_c_sharp_warnings_cs8597_highlighting = none

# Type is already listed in the interface list with different nullability of reference types.
resharper_c_sharp_warnings_cs8645_highlighting = none

# Type parameter has no matching typeparam tag in the XML comment
resharper_c_sharp_warnings_cs1712_highlighting = none

# Type parameter has the same name as a type parameter from the outer type
resharper_c_sharp_warnings_cs0693_highlighting = none

# Unable to include XML fragment
resharper_c_sharp_warnings_cs1589_highlighting = none

# Unassigned field
resharper_unassigned_field_compiler_highlighting = none

# Unassigned readonly field
resharper_unassigned_readonly_field_compiler_highlighting = none

# Unboxing a possibly null value.
resharper_c_sharp_warnings_cs8605_highlighting = none

# Unused local variable
resharper_unused_variable_compiler_highlighting = none

# Use of obsolete symbol
resharper_c_sharp_warnings_cs0618_highlighting = none

# Use of obsolete symbol (without message)
resharper_c_sharp_warnings_cs0612_highlighting = none

# XML comment has a 'typeparam' tag for 'TypeParameter', but there is no type parameter by that name
resharper_c_sharp_warnings_cs1711_highlighting = none

# XML comment has cref attribute that refers to a type parameter
resharper_c_sharp_warnings_cs1723_highlighting = none

# XML comment is not placed on a valid language element
resharper_c_sharp_warnings_cs1587_highlighting = none

# Base type is required
resharper_required_base_types_is_not_inherited_highlighting = none

# BaseTypeRequired attribute supports only classes and interfaces
resharper_unsupported_required_base_type_highlighting = none

# Inconsistent Naming
resharper_inconsistent_naming_highlighting = none

# Namespace does not correspond to file location
resharper_check_namespace_highlighting = none

# Non-nullable or required member is not initialized at constructor exit
resharper_not_null_or_required_member_is_not_initialized_highlighting = none

# Possible 'null' assignment to non-nullable entity
resharper_assign_null_to_not_null_attribute_highlighting = none

# Problem in contract annotation definition
resharper_contract_annotation_not_parsed_highlighting = none

# Values of types marked with 'CannotApplyEqualityOperatorAttribute' should be compared using 'Equals()'
resharper_cannot_apply_equality_operator_to_type_highlighting = none

# Database function must not be called in non-database context
resharper_entity_framework_client_side_db_function_call_highlighting = none

# Function is not convertible to SQL and must not be called in the database context
resharper_entity_framework_unsupported_server_side_function_call_highlighting = none

# Possible multiple queries to the database (N+1 problem)
resharper_entity_framework_n_plus_one_usage_highlighting = none

# Possible multiple queries to the database for related entities (N+1 problem)
resharper_entity_framework_n_plus_one_query_highlighting = none

# Possible performance issues caused by unlimited string length
resharper_entity_framework_model_validation_unlimited_string_length_highlighting = none

# Query can return incomplete data for related entities
resharper_entity_framework_n_plus_one_incomplete_data_query_highlighting = none

# The relationship defined by this property contributes to a dependency loop
resharper_entity_framework_model_validation_circular_dependency_highlighting = none

# Usage of navigational property can return incomplete data
resharper_entity_framework_n_plus_one_incomplete_data_usage_highlighting = none

# Incorrect blank lines (blank lines are missing elsewhere)
resharper_missing_blank_lines_highlighting = none

# Incorrect blank lines (blank lines are redundant elsewhere)
resharper_redundant_blank_lines_highlighting = none

# Incorrect blank lines (incorrect number of blank lines near braces)
resharper_incorrect_blank_lines_near_braces_highlighting = none

# Incorrect indent (around child statement)
resharper_bad_child_statement_indent_highlighting = none

# Incorrect indent (around declaration braces)
resharper_bad_declaration_braces_indent_highlighting = none

# Incorrect indent (around expression braces)
resharper_bad_expression_braces_indent_highlighting = none

# Incorrect indent (around namespace braces)
resharper_bad_namespace_braces_indent_highlighting = none

# Incorrect indent (around preprocessor directive)
resharper_bad_preprocessor_indent_highlighting = none

# Incorrect indent (around statement braces)
resharper_bad_control_braces_indent_highlighting = none

# Incorrect indent (around switch statement)
resharper_bad_switch_braces_indent_highlighting = none

# Incorrect indent (incorrect indent size)
resharper_wrong_indent_size_highlighting = none

# Incorrect indent (indent level is not restored)
resharper_outdent_is_off_prev_level_highlighting = none

# Incorrect indent (missing indent/outdent elsewhere)
resharper_missing_indent_highlighting = none

# Incorrect indent (redundant indent/outdent elsewhere)
resharper_bad_indent_highlighting = none

# Incorrect indent (tabs/spaces mismatch)
resharper_tabs_and_spaces_mismatch_highlighting = none

# Incorrect line breaks (around comma in lists)
resharper_bad_list_line_breaks_highlighting = none

# Incorrect line breaks (around declaration braces)
resharper_bad_declaration_braces_line_breaks_highlighting = none

# Incorrect line breaks (around empty braces)
resharper_bad_empty_braces_line_breaks_highlighting = none

# Incorrect line breaks (around expression braces)
resharper_bad_expression_braces_line_breaks_highlighting = none

# Incorrect line breaks (around LINQ queries)
resharper_bad_linq_line_breaks_highlighting = none

# Incorrect line breaks (around parenthesis)
resharper_bad_parens_line_breaks_highlighting = none

# Incorrect line breaks (around statement braces)
resharper_bad_control_braces_line_breaks_highlighting = none

# Incorrect line breaks (line break is missing elsewhere)
resharper_missing_linebreak_highlighting = none

# Incorrect line breaks (line break is redundant elsewhere)
resharper_redundant_linebreak_highlighting = none

# Incorrect line breaks (multiple statements on one line)
resharper_multiple_statements_on_one_line_highlighting = none

# Incorrect line breaks (multiple type members on one line)
resharper_multiple_type_members_on_one_line_highlighting = none

# Incorrect spacing (around attributes)
resharper_bad_attribute_brackets_spaces_highlighting = none

# Incorrect spacing (around braces)
resharper_bad_braces_spaces_highlighting = none

# Incorrect spacing (around colon)
resharper_bad_colon_spaces_highlighting = none

# Incorrect spacing (around comma)
resharper_bad_comma_spaces_highlighting = none

# Incorrect spacing (around generic brackets)
resharper_bad_generic_brackets_spaces_highlighting = none

# Incorrect spacing (around member access symbols)
resharper_bad_member_access_spaces_highlighting = none

# Incorrect spacing (around operator symbols)
resharper_bad_symbol_spaces_highlighting = none

# Incorrect spacing (around parenthesis)
resharper_bad_parens_spaces_highlighting = none

# Incorrect spacing (around semicolon)
resharper_bad_semicolon_spaces_highlighting = none

# Incorrect spacing (around square brackets within a statement)
resharper_bad_square_brackets_spaces_highlighting = none

# Incorrect spacing (between keyword and parenthesis)
resharper_bad_spaces_after_keyword_highlighting = none

# Incorrect spacing (multiple spaces are prohibited)
resharper_multiple_spaces_highlighting = none

# Incorrect spacing (space is missing elsewhere)
resharper_missing_space_highlighting = none

# Incorrect spacing (space is redundant elsewhere)
resharper_redundant_space_highlighting = none

# Incorrect spacing (tabs are prohibited here)
resharper_tabs_outside_indent_highlighting = none

# Grammar error in comment
resharper_grammar_mistake_in_comment_highlighting = none

# Grammar error in markup attribute value
resharper_grammar_mistake_in_markup_attribute_highlighting = none

# Grammar error in markup text
resharper_grammar_mistake_in_markup_text_highlighting = none

# Grammar error in string literal
resharper_grammar_mistake_in_string_literal_highlighting = none

# Append to collection expression
resharper_append_to_collection_expression_highlighting = none

# Conditional expression can be rewritten as null-coalescing
resharper_replace_conditional_expression_with_null_coalescing_highlighting = none

# Convert 'as' expression type check and the following null check into pattern matching
resharper_use_pattern_matching_highlighting = none

# Convert constructor into member initializers
resharper_convert_constructor_to_member_initializers_highlighting = none

# Convert constructor into primary constructor
resharper_convert_to_primary_constructor_highlighting = none

# Convert delegate variable into local function
resharper_convert_to_local_function_highlighting = none

# Convert 'if' statement into 'switch'
resharper_convert_if_statement_to_switch_statement_highlighting = none

# Convert into 'await using' statement or declaration
resharper_use_await_using_highlighting = none

# Convert into lambda expression
resharper_convert_to_lambda_expression_highlighting = none

# Convert into 'using' declaration
resharper_convert_to_using_declaration_highlighting = none

# Convert lambda expression into method group
resharper_convert_closure_to_method_group_highlighting = none

# Convert 'Nullable&lt;T&gt;' into 'T?'
resharper_convert_nullable_to_short_form_highlighting = none

# Convert property into auto-property
resharper_convert_to_auto_property_highlighting = none

# For-loop can be converted into foreach-loop
resharper_for_can_be_converted_to_foreach_highlighting = none

# 'if' statement can be rewritten as '?:' expression
resharper_convert_if_statement_to_conditional_ternary_expression_highlighting = none

# 'if' statement can be rewritten as '??' expression
resharper_convert_if_statement_to_null_coalescing_expression_highlighting = none

# 'if' statement can be rewritten as '??=' assignment
resharper_convert_if_statement_to_null_coalescing_assignment_highlighting = none

# 'if-return' statement can be rewritten as 'return' statement
resharper_convert_if_statement_to_return_statement_highlighting = none

# Inline 'out' variable declaration
resharper_inline_out_variable_declaration_highlighting = none

# Inline temporary variable
resharper_inline_temporary_variable_highlighting = none

# Introduce optional parameters (non-private accessibility)
resharper_introduce_optional_parameters_global_highlighting = none

# Introduce optional parameters (private accessibility)
resharper_introduce_optional_parameters_local_highlighting = none

# Invert 'if' statement to reduce nesting
resharper_invert_if_highlighting = none

# Join null check with assignment
resharper_join_null_check_with_usage_highlighting = none

# Lambda expression/anonymous method must not have captures of the containing context
resharper_lambda_should_not_capture_context_highlighting = none

# Loop can be converted into LINQ-expression
resharper_loop_can_be_converted_to_query_highlighting = none

# Merge conditional ?: expression into conditional access
resharper_merge_conditional_expression_highlighting = none

# Merge nested property patterns
resharper_merge_nested_property_patterns_highlighting = none

# Merge null/pattern checks into complex pattern
resharper_merge_into_pattern_highlighting = none

# Merge sequential checks into single conditional access check
resharper_merge_sequential_checks_highlighting = none

# Pass string interpolation expression
resharper_pass_string_interpolation_highlighting = none

# Redundant spread element
resharper_redundant_spread_element_highlighting = none

# Replace if statement with null-propagating code
resharper_use_null_propagation_highlighting = none

# Replace 'SequenceEqual' with constant pattern
resharper_replace_sequence_equal_with_constant_pattern_highlighting = none

# Use collection expression syntax
resharper_use_collection_expression_highlighting = none

# Use compound assignment
resharper_convert_to_null_coalescing_compound_assignment_highlighting = none

# Use discard assignment
resharper_use_discard_assignment_highlighting = none

# Use 'nameof' expression to reference enum member name
resharper_use_name_of_instead_of_to_string_highlighting = none

# Use 'nameof' expression to reference name
resharper_use_nameof_expression_highlighting = none

# Use 'nameof' expression when registering a DependencyProperty
resharper_use_nameof_for_dependency_property_highlighting = none

# Use object or collection initializer when possible
resharper_use_object_or_collection_initializer_highlighting = none

# Use string interpolation expression
resharper_use_string_interpolation_highlighting = none

# Use unsigned right shift operator '&gt;&gt;&gt;'
resharper_use_unsigned_right_shift_operator_highlighting = none

# Use UTF-8 string literal
resharper_use_utf8_string_literal_highlighting = none

# NUnit. Async test method must return Task or Task&lt;T&gt;
resharper_n_unit_async_method_must_be_task_highlighting = none

# NUnit. Implicitly unspecified null values.
resharper_n_unit_implicit_unspecified_null_values_highlighting = none

# NUnit. Incompatible argument type or incorrect argument value.
resharper_n_unit_incorrect_argument_type_highlighting = none

# NUnit. Incompatible expected result type or incorrect value.
resharper_n_unit_incorrect_expected_result_type_highlighting = none

# NUnit. Incorrect range bounds. 'to' must be greater than or equal to 'from'.
resharper_n_unit_incorrect_range_bounds_highlighting = none

# NUnit. Mismatch of the range step sign.
resharper_n_unit_range_step_sign_mismatch_highlighting = none

# NUnit. Missing arguments in TestCase attribute.
resharper_n_unit_missing_arguments_in_test_case_attribute_highlighting = none

# NUnit. Missing expected result for non-void test method.
resharper_n_unit_test_case_attribute_requires_expected_result_highlighting = none

# NUnit. No values provided in the attributes.
resharper_n_unit_no_values_provided_highlighting = none

# NUnit. Non-public test method.
resharper_n_unit_non_public_method_with_test_attribute_highlighting = none

# NUnit. Range 'step' parameter value must be non-zero.
resharper_n_unit_range_step_value_must_not_be_zero_highlighting = none

# NUnit. Redundant argument in TestCase attribute.
resharper_n_unit_redundant_argument_in_test_case_attribute_highlighting = none

# NUnit. Redundant argument instead of ExpectedResult.
resharper_n_unit_redundant_argument_instead_of_expected_result_highlighting = none

# NUnit. Redundant expected result for void test method.
resharper_n_unit_redundant_expected_result_in_test_case_attribute_highlighting = none

# NUnit. Specified attribute values produce too many tests.
resharper_n_unit_attribute_produces_too_many_tests_highlighting = none

# NUnit. Specified values are not compatible with the test parameter type.
resharper_n_unit_parameter_type_is_not_compatible_with_attribute_highlighting = none

# NUnit. Test case Result property duplicates ExpectedResult.
resharper_n_unit_test_case_result_property_duplicates_expected_result_highlighting = none

# NUnit. Test case Result property is obsolete.
resharper_n_unit_test_case_result_property_is_obsolete_highlighting = none

# NUnit. Test case source must be field, property, or method.
resharper_n_unit_test_case_source_must_be_field_property_method_highlighting = none

# NUnit. Test case source must be non-abstract and implement IEnumerable.
resharper_n_unit_test_case_source_should_implement_i_enumerable_highlighting = none

# NUnit. Test case source must be static.
resharper_n_unit_test_case_source_must_be_static_highlighting = none

# NUnit. The maximum range value is not reachable with the step value.
resharper_n_unit_range_to_value_is_not_reachable_highlighting = none

# NUnit. Values for test method parameters are not provided.
resharper_n_unit_method_with_parameters_and_test_attribute_highlighting = none

# NUnit. Values in range do not fit the type of the test parameter.
resharper_n_unit_range_attribute_bounds_are_out_of_range_highlighting = none

# '?:' expression has identical true and false branches
resharper_conditional_ternary_equal_branch_highlighting = none

# [MustDisposeResource] annotation is not inherited from the base constructor and should be placed explicitly
resharper_constructor_with_must_dispose_resource_attribute_base_is_not_annotated_highlighting = none

# [ThreadStatic] does not work with instance fields
resharper_thread_static_at_instance_field_highlighting = none

# Access to disposed captured variable
resharper_access_to_disposed_closure_highlighting = none

# Access to foreach variable in closure
resharper_access_to_for_each_variable_in_closure_highlighting = none

# Access to modified captured variable
resharper_access_to_modified_closure_highlighting = none

# Assignment in conditional expression
resharper_assignment_in_conditional_expression_highlighting = none

# Auto-property accessor is never used (non-private accessibility)
resharper_unused_auto_property_accessor_global_highlighting = none

# Auto-property accessor is never used (private accessibility)
resharper_unused_auto_property_accessor_local_highlighting = none

# Avoid mixing of variable-length escape sequences and text
resharper_variable_length_string_hex_escape_sequence_highlighting = none

# Avoid using 'async' lambda when delegate type returns 'void'
resharper_async_void_lambda_highlighting = none

# Bitwise operation on enum that is not marked by the [Flags] attribute
resharper_bitwise_operator_on_enum_without_flags_highlighting = none

# Cannot resolve symbol in text argument
resharper_not_resolved_in_text_highlighting = none

# Captured primary constructor parameter is mutable
resharper_captured_primary_constructor_parameter_is_mutable_highlighting = none

# Class is never instantiated (non-private accessibility)
resharper_class_never_instantiated_global_highlighting = none

# Class is never instantiated (private accessibility)
resharper_class_never_instantiated_local_highlighting = none

# Collection content is never queried (non-private accessibility)
resharper_collection_never_queried_global_highlighting = none

# Collection content is never queried (private accessibility)
resharper_collection_never_queried_local_highlighting = none

# Collection is never updated (non-private accessibility)
resharper_collection_never_updated_global_highlighting = none

# Collection is never updated (private accessibility)
resharper_collection_never_updated_local_highlighting = none

# Co-variant array conversion
resharper_co_variant_array_conversion_highlighting = none

# Disposal of a variable already captured by the 'using' statement
resharper_dispose_on_using_variable_highlighting = none

# Do not store SpinLock in readonly field
resharper_spin_lock_in_readonly_field_highlighting = none

# Do not use object initializer for 'using' variable
resharper_using_statement_resource_initialization_highlighting = none

# Do not use object initializer for 'using' variable (object initializer expression may throw exception while initializing 'using' variable)
resharper_using_statement_resource_initialization_expression_highlighting = none

# Do not use right brace after a format specifier in format strings
resharper_format_specifier_captures_right_braces_highlighting = none

# Duplicate keys in dictionary/set initialization
resharper_duplicate_key_collection_initialization_highlighting = none

# Duplicated chained 'if' branches
resharper_duplicated_chained_if_bodies_highlighting = none

# Duplicated sequential 'if' branches
resharper_duplicated_sequential_if_bodies_highlighting = none

# Duplicated switch branches
resharper_duplicated_switch_section_bodies_highlighting = none

# Element is localizable
resharper_localizable_element_highlighting = none

# Empty general catch clause
resharper_empty_general_catch_clause_highlighting = none

# Equality comparison of floating point numbers
resharper_compare_of_floats_by_equality_operator_highlighting = none

# Escape sequence can be simplified
resharper_can_simplify_string_escape_sequence_highlighting = none

# Event is never subscribed to (non-private accessibility)
resharper_event_never_subscribed_to_global_highlighting = none

# Event is never subscribed to (private accessibility)
resharper_event_never_subscribed_to_local_highlighting = none

# Extract common code
resharper_extract_common_branching_code_highlighting = none

# Formatting is specified, but interpolated string expression is not IFormattable
resharper_interpolated_string_expression_is_not_i_formattable_highlighting = none

# Function never returns
resharper_function_never_returns_highlighting = none

# 'GC.SuppressFinalize' is invoked for type without destructor
resharper_gc_suppress_finalize_for_type_without_destructor_highlighting = none

# Heuristically unreachable case according to integer analysis
resharper_unreachable_switch_case_due_to_integer_analysis_highlighting = none

# Heuristically unreachable switch arm according to integer analysis
resharper_unreachable_switch_arm_due_to_integer_analysis_highlighting = none

# Inconsistent order of taken locks
resharper_inconsistent_order_of_locks_highlighting = none

# Inconsistent synchronization on field
resharper_inconsistently_synchronized_field_highlighting = none

# Index from end must be greater than zero; use '^1' to refer to the last element
resharper_zero_index_from_end_highlighting = none

# Invalid XML documentation comment
resharper_invalid_xml_doc_comment_highlighting = none

# Invocation of polymorphic field-like event
resharper_polymorphic_field_like_event_invocation_highlighting = none

# IQueryable is possibly unintentionally used as IEnumerable
resharper_possible_unintended_queryable_as_enumerable_highlighting = none

# Local variable hides member
resharper_local_variable_hides_member_highlighting = none

# Local variable hides primary constructor parameter
resharper_local_variable_hides_primary_constructor_parameter_highlighting = none

# Loop control variable is never changed inside loop
resharper_loop_variable_is_never_changed_inside_loop_highlighting = none

# Member hides static member from outer class
resharper_member_hides_static_from_outer_class_highlighting = none

# Member initialized value ignored
resharper_member_initializer_value_ignored_highlighting = none

# Missing '.ConfigureAwait(false)' in library code
resharper_use_configure_await_false_highlighting = none

# Non-accessed field (non-private accessibility)
resharper_not_accessed_field_global_highlighting = none

# Non-accessed field (private accessibility)
resharper_not_accessed_field_local_highlighting = none

# Non-accessed positional property (non-private accessibility)
resharper_not_accessed_positional_property_global_highlighting = none

# Non-accessed positional property (private accessibility)
resharper_not_accessed_positional_property_local_highlighting = none

# Non-readonly type member referenced in 'GetHashCode()'
resharper_non_readonly_member_in_get_hash_code_highlighting = none

# One way operations must not return values
resharper_one_way_operation_contract_with_return_type_highlighting = none

# Overridden GetHashCode calls base 'Object.GetHashCode()'
resharper_base_object_get_hash_code_call_in_get_hash_code_highlighting = none

# Parameter hides member
resharper_parameter_hides_member_highlighting = none

# Parameter hides primary constructor parameter
resharper_parameter_hides_primary_constructor_parameter_highlighting = none

# Parameter name differs between partial member declarations
resharper_partial_method_parameter_name_mismatch_highlighting = none

# Possible comparison of value type with 'null'
resharper_compare_non_constrained_generic_with_null_highlighting = none

# Possible cyclic constructor call
resharper_constructor_initializer_loop_highlighting = none

# Possible incorrect implementation of Double-Check Locking pattern. Possible multiple write access to checked field.
resharper_possible_multiple_write_access_in_double_check_locking_highlighting = none

# Possible incorrect implementation of Double-Check Locking pattern. Read access to checked field.
resharper_read_access_in_double_check_locking_highlighting = none

# Possible infinite inheritance
resharper_possible_infinite_inheritance_highlighting = none

# Possible mistaken argument of type 'System.Type'
resharper_possible_mistaken_system_type_argument_highlighting = none

# Possible mistaken 'GetType()' invocation
resharper_possible_mistaken_call_to_get_type_highlighting = none

# Possible multiple enumeration
resharper_possible_multiple_enumeration_highlighting = none

# Possible 'System.InvalidCastException' in foreach loop
resharper_possible_invalid_cast_exception_in_foreach_loop_highlighting = none

# Possible 'System.InvalidOperationException'
resharper_possible_invalid_operation_exception_highlighting = none

# Possible 'System.NullReferenceException'
resharper_possible_null_reference_exception_highlighting = none

# Possible unintended reference comparison
resharper_possible_unintended_reference_comparison_highlighting = none

# Possibly impure struct method is called on readonly variable: struct value always copied before invocation
resharper_possibly_impure_method_call_on_readonly_variable_highlighting = none

# Possibly mistaken use of a 'CancellationToken'
resharper_possibly_mistaken_use_of_cancellation_token_highlighting = none

# Possibly unintended modification inside conditional invocation
resharper_possibly_unintended_side_effects_inside_conditional_invocation_highlighting = none

# Possibly unintended string interpolation instead of format string template
resharper_possibly_mistaken_use_of_interpolated_string_insert_highlighting = none

# Possibly wrong string comparison: spans are only equal when pointing to the same memory location
resharper_string_span_comparison_highlighting = none

# Potentially misleading parameter name in lambda or local function
resharper_all_underscore_local_parameter_name_highlighting = none

# Prefer explicitly provided tuple component name
resharper_prefer_explicitly_provided_tuple_component_name_highlighting = none

# Primary constructor parameter capturing is disallowed
resharper_primary_constructor_parameter_capture_disallowed_highlighting = none

# Return type of a function can be made non-nullable
resharper_return_type_can_be_not_nullable_highlighting = none

# Return value of [MustUseReturnValue]-annotated method is not used
resharper_must_use_return_value_highlighting = none

# Return value of a method annotated with [MustDisposeResource] is never disposed
resharper_not_disposed_resource_highlighting = none

# Return value of a property must be disposed by the callee
resharper_not_disposed_resource_is_returned_by_property_highlighting = none

# Return value of pure method is not used
resharper_return_value_of_pure_method_is_not_used_highlighting = none

# Return value should be disposed but the method or function is not annotated with [MustDisposeResource]
resharper_not_disposed_resource_is_returned_highlighting = none

# Safe cast expression always succeeds
resharper_try_cast_always_succeeds_highlighting = none

# Some values of the enum are not processed inside 'switch' expression and are handled via exception in default arm
resharper_switch_expression_handles_some_known_enum_values_with_exception_in_default_highlighting = none

# Some values of the enum are not processed inside 'switch' statement
resharper_switch_statement_missing_some_enum_cases_no_default_highlighting = none

# Some values of the enum are not processed inside 'switch' statement and are handled via default section
resharper_switch_statement_handles_some_known_enum_values_with_default_highlighting = none

# Static field or auto-property in generic type
resharper_static_member_in_generic_type_highlighting = none

# String formatting method problems
resharper_format_string_problem_highlighting = none

# Structured message template problems
resharper_structured_message_template_problem_highlighting = none

# Suspicious type conversion or check
resharper_suspicious_type_conversion_global_highlighting = none

# Symbol from module that might be missing at runtime
resharper_symbol_from_not_copied_locally_reference_used_warning_highlighting = none

# The given expression of 'is' operator is always of the provided type
resharper_is_expression_always_true_highlighting = none

# The logging message template should not vary between calls to a logging method
resharper_non_static_logger_template_highlighting = none

# The pattern is redundant, it does not produce any runtime checks
resharper_pattern_is_redundant_highlighting = none

# The source expression always matches the provided pattern
resharper_pattern_always_matches_highlighting = none

# Thread static field has initializer
resharper_thread_static_field_has_initializer_highlighting = none

# Type check and casts can be merged
resharper_merge_cast_with_type_check_highlighting = none

# Unassigned field (non-private accessibility)
resharper_unassigned_field_global_highlighting = none

# Unassigned field (private accessibility)
resharper_unassigned_field_local_highlighting = none

# Use collection's count property
resharper_use_collection_count_property_highlighting = none

# Use format specifier in format strings
resharper_use_format_specifier_in_format_string_highlighting = none

# Use format specifier in interpolated strings
resharper_simplify_string_interpolation_highlighting = none

# Use null check instead of a type check succeeding on any not-null value
resharper_convert_type_check_to_null_check_highlighting = none

# 'value' parameter is not used
resharper_value_parameter_not_used_highlighting = none

# Variable can be declared as non-nullable
resharper_variable_can_be_not_nullable_highlighting = none

# Virtual member call in constructor
resharper_virtual_member_call_in_constructor_highlighting = none

# '??' condition is known to be null or not null
resharper_constant_null_coalescing_condition_highlighting = none

# Assignment is not used
resharper_redundant_assignment_highlighting = none

# Conditional access qualifier expression is not null according to nullable reference types' annotations
resharper_conditional_access_qualifier_is_non_nullable_according_to_api_contract_highlighting = none

# Double negation operator
resharper_double_negation_operator_highlighting = none

# Duplicated statements
resharper_duplicated_statements_highlighting = none

# Empty 'for' loop is redundant
resharper_empty_for_statement_highlighting = none

# Explicit delegate creation expression is redundant
resharper_redundant_delegate_creation_highlighting = none

# Expression is always 'null'
resharper_expression_is_always_null_highlighting = none

# Expression is always 'true' or always 'false'
resharper_condition_is_always_true_or_false_highlighting = none

# Expression is always 'true' or 'false' according to nullable reference types' annotations
resharper_condition_is_always_true_or_false_according_to_nullable_api_contract_highlighting = none

# Heuristically unreachable code
resharper_heuristic_unreachable_code_highlighting = none

# Math.Abs() argument is always non-negative
resharper_math_abs_method_is_redundant_highlighting = none

# Parentheses are redundant if attribute has no arguments
resharper_redundant_attribute_parentheses_highlighting = none

# Private field can be converted into local variable
resharper_private_field_can_be_converted_to_local_variable_highlighting = none

# Redundant 'abstract' modifier
resharper_redundant_abstract_modifier_highlighting = none

# Redundant anonymous type property explicit name
resharper_redundant_anonymous_type_property_name_highlighting = none

# Redundant argument passed to caller argument expression parameter
resharper_redundant_caller_argument_expression_default_value_highlighting = none

# Redundant argument with default value
resharper_redundant_argument_default_value_highlighting = none

# Redundant 'Attribute' suffix
resharper_redundant_attribute_suffix_highlighting = none

# Redundant 'case' label
resharper_redundant_case_label_highlighting = none

# Redundant cast
resharper_redundant_cast_highlighting = none

# Redundant catch clause
resharper_redundant_catch_clause_highlighting = none

# Redundant collection copy
resharper_redundant_collection_copy_call_highlighting = none

# Redundant context capturing with 'ConfigureAwait'
resharper_redundant_configure_await_highlighting = none

# Redundant control flow jump statement
resharper_redundant_jump_statement_highlighting = none

# Redundant 'else' keyword
resharper_redundant_if_else_block_highlighting = none

# Redundant empty argument list on object creation expression
resharper_redundant_empty_object_creation_argument_list_highlighting = none

# Redundant empty switch section
resharper_redundant_empty_switch_section_highlighting = none

# Redundant explicit collection creation in argument of 'params' parameter
resharper_redundant_explicit_params_array_creation_highlighting = none

# Redundant explicit size specification in array creation
resharper_redundant_explicit_array_size_highlighting = none

# Redundant explicit type in array creation
resharper_redundant_explicit_array_creation_highlighting = none

# Redundant fixed pointer declaration
resharper_redundant_fixed_pointer_declaration_highlighting = none

# Redundant global using directive
resharper_redundant_using_directive_global_highlighting = none

# Redundant 'IEnumerable.Cast&lt;T&gt;' or 'IEnumerable.OfType&lt;T&gt;' call
resharper_redundant_enumerable_cast_call_highlighting = none

# Redundant lambda expression parameter type specification
resharper_redundant_lambda_parameter_type_highlighting = none

# Redundant lambda signature parentheses
resharper_redundant_lambda_signature_parentheses_highlighting = none

# Redundant name qualifier
resharper_redundant_name_qualifier_highlighting = none

# Redundant nullable directive
resharper_redundant_nullable_directive_highlighting = none

# Redundant nullable warning suppression expression
resharper_redundant_suppress_nullable_warning_expression_highlighting = none

# Redundant 'object.ToString()' call
resharper_redundant_to_string_call_highlighting = none

# Redundant operand in logical conditional expression
resharper_redundant_logical_conditional_expression_operand_highlighting = none

# Redundant string interpolation
resharper_redundant_string_interpolation_highlighting = none

# Redundant 'string.Format()' call
resharper_redundant_string_format_call_highlighting = none

# Redundant switch expression arms
resharper_redundant_switch_expression_arms_highlighting = none

# Redundant type arguments inside 'nameof'
resharper_redundant_type_arguments_inside_nameof_highlighting = none

# Redundant type arguments of method
resharper_redundant_type_arguments_of_method_highlighting = none

# Redundant type declaration body
resharper_redundant_type_declaration_body_highlighting = none

# Redundant using directive
resharper_redundant_using_directive_highlighting = none

# Redundant verbatim string prefix
resharper_redundant_verbatim_string_prefix_highlighting = none

# Class with virtual (overridable) members never inherited (non-private accessibility)
resharper_class_with_virtual_members_never_inherited_global_highlighting = none

# Class with virtual (overridable) members never inherited (private accessibility)
resharper_class_with_virtual_members_never_inherited_local_highlighting = none

# Empty constructor
resharper_empty_constructor_highlighting = none

# Empty destructor
resharper_empty_destructor_highlighting = none

# Empty implementation of 'partial void' method is redundant
resharper_redundant_partial_method_empty_implementation_highlighting = none

# Empty namespace declaration
resharper_empty_namespace_highlighting = none

# Local function is never used
resharper_unused_local_function_highlighting = none

# Method return value is never used (non-private accessibility)
resharper_unused_method_return_value_global_highlighting = none

# Method return value is never used (private accessibility)
resharper_unused_method_return_value_local_highlighting = none

# Non-accessed local variable
resharper_not_accessed_variable_highlighting = none

# Non-accessed local variable is only used to discard the 'out' parameter value
resharper_not_accessed_out_parameter_variable_highlighting = none

# Parameter output value is always discarded (non-private accessibility)
resharper_out_parameter_value_is_always_discarded_global_highlighting = none

# Parameter output value is always discarded (private accessibility)
resharper_out_parameter_value_is_always_discarded_local_highlighting = none

# Redundant class or interface specification in base types list
resharper_redundant_extends_list_entry_highlighting = none

# Redundant member initializer
resharper_redundant_default_member_initializer_highlighting = none

# Redundant member override
resharper_redundant_overridden_member_highlighting = none

# Redundant 'partial' modifier on method declaration
resharper_partial_method_with_single_part_highlighting = none

# Redundant 'partial' modifier on type declaration
resharper_partial_type_with_single_part_highlighting = none

# Sealed member in sealed class
resharper_sealed_member_in_sealed_class_highlighting = none

# Type is never used (non-private accessibility)
resharper_unused_type_global_highlighting = none

# Type is never used (private accessibility)
resharper_unused_type_local_highlighting = none

# Type member is never accessed via base type (non-private accessibility)
resharper_unused_member_in_super_global_highlighting = none

# Type member is never accessed via base type (private accessibility)
resharper_unused_member_in_super_local_highlighting = none

# Type member is never used (non-private accessibility)
resharper_unused_member_global_highlighting = none

# Type member is never used (private accessibility)
resharper_unused_member_local_highlighting = none

# Underlying type of enum is 'int'
resharper_enum_underlying_type_is_int_highlighting = none

# Unused local variable
resharper_unused_variable_highlighting = none

# Unused parameter (non-private accessibility)
resharper_unused_parameter_global_highlighting = none

# Unused parameter (private accessibility)
resharper_unused_parameter_local_highlighting = none

# Unused parameter in partial method
resharper_unused_parameter_in_partial_method_highlighting = none

# Virtual (overridable) member is never overridden (non-private accessibility)
resharper_virtual_member_never_overridden_global_highlighting = none

# Virtual (overridable) member is never overridden (private accessibility)
resharper_virtual_member_never_overridden_local_highlighting = none

# Vulnerable API usage
resharper_vulnerable_api_highlighting = none

# Typo in comment
resharper_comment_typo_highlighting = none

# Typo in identifier
resharper_identifier_typo_highlighting = none

# Typo in string literal
resharper_string_literal_typo_highlighting = none

# Add parentheses to avoid non-obvious precedence
resharper_arrange_missing_parentheses_highlighting = none

# Add/remove qualifier for static members
resharper_arrange_static_member_qualifier_highlighting = none

# Add/remove 'this.' qualifier
resharper_arrange_this_qualifier_highlighting = none

# Adjust modifiers declaration order
resharper_arrange_modifiers_order_highlighting = none

# Arrange null checking pattern
resharper_arrange_null_checking_pattern_highlighting = none

# Join or separate attributes in section
resharper_arrange_attributes_highlighting = none

# Join or separate 'var' in deconstruction declarations
resharper_arrange_var_keywords_in_deconstructing_declaration_highlighting = none

# Remove redundant parentheses
resharper_arrange_redundant_parentheses_highlighting = none

# Replace built-in type reference with a CLR type name or a keyword
resharper_built_in_type_reference_style_highlighting = none

# Replace built-in type reference with a CLR type name or a keyword in static member access expressions
resharper_built_in_type_reference_style_for_member_access_highlighting = none

# Separate control transfer statement with blank line
resharper_separate_control_transfer_statement_highlighting = none

# Unnecessary whitespace at the end of line
resharper_unnecessary_whitespace_highlighting = none

# Usage of tabulation character for indentation is prohibited
resharper_tabs_are_disallowed_highlighting = none

# Use explicit or implicit modifier definition for type members
resharper_arrange_type_member_modifiers_highlighting = none

# Use explicit or implicit modifier definition for types
resharper_arrange_type_modifiers_highlighting = none

# Use preferred argument style
resharper_arguments_style_other_highlighting = none

# Use preferred argument style for anonymous functions
resharper_arguments_style_anonymous_function_highlighting = none

# Use preferred argument style for literal values
resharper_arguments_style_literal_highlighting = none

# Use preferred argument style for named expressions
resharper_arguments_style_named_expression_highlighting = none

# Use preferred argument style for string literal values
resharper_arguments_style_string_literal_highlighting = none

# Use preferred body style (convert into constructor or destructor with preferred body style)
resharper_arrange_constructor_or_destructor_body_highlighting = none

# Use preferred body style (convert into local function with preferred body style)
resharper_arrange_local_function_body_highlighting = none

# Use preferred body style (convert into method or operator with preferred body style)
resharper_arrange_method_or_operator_body_highlighting = none

# Use preferred body style (convert into property, indexer, or event with preferred body style)
resharper_arrange_accessor_owner_body_highlighting = none

# Use preferred braces style (enforce braces in 'do-while' statement)
resharper_enforce_do_while_statement_braces_highlighting = none

# Use preferred braces style (enforce braces in 'fixed' statement)
resharper_enforce_fixed_statement_braces_highlighting = none

# Use preferred braces style (enforce braces in 'for' statement)
resharper_enforce_for_statement_braces_highlighting = none

# Use preferred braces style (enforce braces in 'foreach' statement)
resharper_enforce_foreach_statement_braces_highlighting = none

# Use preferred braces style (enforce braces in 'if' statement)
resharper_enforce_if_statement_braces_highlighting = none

# Use preferred braces style (enforce braces in 'lock' statement)
resharper_enforce_lock_statement_braces_highlighting = none

# Use preferred braces style (enforce braces in 'using' statement)
resharper_enforce_using_statement_braces_highlighting = none

# Use preferred braces style (enforce braces in 'while' statement)
resharper_enforce_while_statement_braces_highlighting = none

# Use preferred braces style (remove redundant braces)
resharper_remove_redundant_braces_highlighting = none

# Use preferred namespace body style
resharper_arrange_namespace_body_highlighting = none

# Use preferred style for discard declaration
resharper_suggest_discard_declaration_var_style_highlighting = none

# Use preferred style for trailing comma before new line in multiline lists
resharper_arrange_trailing_comma_in_multiline_lists_highlighting = none

# Use preferred style for trailing comma when the last element is not followed by a new line
resharper_arrange_trailing_comma_in_singleline_lists_highlighting = none

# Use preferred style of default value expression when type is evident
resharper_arrange_default_value_when_type_evident_highlighting = none

# Use preferred style of default value expression when type is not evident
resharper_arrange_default_value_when_type_not_evident_highlighting = none

# Use preferred style of 'new' expression when created type is evident
resharper_arrange_object_creation_when_type_evident_highlighting = none

# Use preferred style of 'new' expression when created type is not evident
resharper_arrange_object_creation_when_type_not_evident_highlighting = none

# Use preferred 'var' style (elsewhere)
resharper_suggest_var_or_type_elsewhere_highlighting = none

# Use preferred 'var' style (for built-in types)
resharper_suggest_var_or_type_built_in_types_highlighting = none

# Use preferred 'var' style (in deconstruction declarations)
resharper_suggest_var_or_type_deconstruction_declarations_highlighting = none

# Use preferred 'var' style (when type is simple)
resharper_suggest_var_or_type_simple_types_highlighting = none

# Console output in Xunit tests
resharper_xunit_xunit_test_with_console_output_highlighting = none

## *END* ReSharper Inspect Code



##
## Roslynator https://josefpihrt.github.io/docs/roslynator/configuration
##

# Disable all rules
# dotnet_analyzer_diagnostic.category-roslynator.severity = none
# roslynator_analyzers.enabled_by_default = false
# roslynator_refactorings.enabled = false
# roslynator_compiler_diagnostic_fixes.enabled = false

# Enable all rules
dotnet_analyzer_diagnostic.category-roslynator.severity = error
roslynator_analyzers.enabled_by_default = true
roslynator_refactorings.enabled = true
roslynator_compiler_diagnostic_fixes.enabled = true

### RCS0056: A line is too long https://josefpihrt.github.io/docs/roslynator/analyzers/RCS0056
roslynator_max_line_length = 200
dotnet_diagnostic.rcs0056.severity = error

# RCS1033: Remove redundant boolean literal https://josefpihrt.github.io/docs/roslynator/analyzers/RCS1033
dotnet_diagnostic.rcs1033.severity = error

# RCS1140: Add exception to documentation comment https://josefpihrt.github.io/docs/roslynator/analyzers/RCS1140/
dotnet_diagnostic.rcs1140.severity = error

# RCS1118: Mark local variable as const https://josefpihrt.github.io/docs/roslynator/analyzers/RCS1118
dotnet_diagnostic.rcs1118.severity = error

# RCS1005: Simplify nested using statement https://josefpihrt.github.io/docs/roslynator/analyzers/RCS1005
dotnet_diagnostic.rcs1005.severity = error

## *END* Roslynator



##
## Editor Guidelines https://marketplace.visualstudio.com/items?itemName=PaulHarrington.EditorGuidelines
##

guidelines = 200
guidelines_style = 1px solid 40ff0000

## *END* Editor Guidelines



# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,nativeproj,locproj}]
indent_size = 2

[*.{csproj,vbproj,proj,nativeproj,locproj}]
charset = utf-8

# Xml build files
[*.builds]
indent_size = 2

# Xml files
[*.{xml,stylecop,resx,ruleset}]
indent_size = 2

# Xml config files
[*.{props,targets,config,nuspec}]
indent_size = 2

# YAML config files
[*.{yml,yaml}]
indent_size = 2

# Shell scripts
[*.sh]
end_of_line = lf
[*.{cmd,bat}]
end_of_line = crlf
